services:
  postgres:
    container_name: database
    restart: always
    build:
      context: ../../
      dockerfile: ./data/docker/docker-db-demo
    env_file: .env
    ports:
      - "${DB_PORT}:${DB_PORT}"
    volumes:
      - ../../db:/var/lib/postgresql/data
      - ../postgresql/postgresql.conf:/etc/postgresql/postgresql.conf
      - ../postgresql/pg_hba.conf:/etc/postgresql/pg_hba.conf
    command: [ "postgres", "-c", "config_file=/etc/postgresql/postgresql.conf" ]
    healthcheck:
      test: [ 'CMD-SHELL', "sh -c 'pg_isready -U postgres -d ${DB_NAME}'" ]
      interval: 5s
      timeout: 60s
      retries: 5
      start_period: 80s
    networks:
      - app-network

  server:
    container_name: server
    build:
      context: ../../
      dockerfile: ./data/docker/docker-server-demo
    env_file: .env
    command: bash -c "npm start"
    volumes:
      - volume-media:/app/media
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  client:
    container_name: client
    build:
      context: ../../
      dockerfile: ./data/docker/docker-client-demo
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - volume-certs:/etc/ssl/certs:ro
      - volume-private:/etc/ssl/private:ro
    depends_on:
      - server
    networks:
      - app-network

  pg_backup:
    container_name: pg_backup
    image: alpine:latest
    env_file: .env
    command: >
      sh -c "apk update && apk add --no-cache postgresql-client && echo '0 * * * * PGPASSWORD=$DB_PASSWORD pg_dump -h $DB_HOST -p $DB_PORT -U $DB_USER $DB_NAME > /backup/$NODE/${DB_NAME}_backup_\$(date +\%F_\%H-\%M).sql' > /etc/crontabs/root && crond -f -l 2"
    volumes:
      - volume-sql-backup:/backup
    networks:
      - app-network

  nas_backup:
    image: alpine:latest
    container_name: nas_backup
    restart: always
    volumes:
      - volume-base:/data:ro
      - volume-backup:/backup
    env_file:
      - .env
    entrypoint: [ "/bin/sh", "-c" ]
    command: |
      apk add --no-cache rsync bash coreutils
      echo "0 */${BACKUP_INTERVAL} * * * sleep ${BACKUP_OFFSET} && rsync -av --delete /data/ /backup/" > /etc/crontabs/root
      crond -f -L /dev/stdout

  keepalived:
    container_name: keepalived
    image: osixia/keepalived:2.0.20
    network_mode: "host"
    cap_add:
      - NET_ADMIN
      - NET_BROADCAST
      - NET_RAW
    env_file: .env
    restart: always

volumes:
  volume-backup:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/aidensrocks_backup

  volume-base:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/aidensrocks/prod

  volume-media:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/aidensrocks/prod/media

  volume-certs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/aidensrocks/prod/ssl/certs

  volume-private:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/aidensrocks/prod/ssl/private

  volume-sql-backup:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/aidensrocks/prod/sql_backup

networks:
  app-network:
    driver: bridge
