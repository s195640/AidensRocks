services:
  postgres:
    container_name: database
    env_file: .env
    ports:
      - "${DB_PORT}:${DB_PORT}"
    image: postgres
    volumes:
      - volume-sql:/var/lib/postgresql/data
      - volume-sql-backup:/backup
    healthcheck:
      test: [ 'CMD-SHELL', "sh -c 'pg_isready -U $DB_USER -d ${DB_NAME}'" ]
      interval: 5s
      timeout: 60s
      retries: 5
      start_period: 80s
    networks:
      - app-network
  server:
    container_name: server
    build:
      context: ../../
      dockerfile: ./data/docker/docker-server-dev
    env_file: .env
    volumes:
      - ../../server:/app
      - /app/node_modules
      - volume-media:/app/media
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
  client:
    container_name: client
    build:
      context: ../../
      dockerfile: ./data/docker/docker-client-dev
    volumes:
      - ../../client:/app
      - /app/node_modules
    depends_on:
      - server
    networks:
      - app-network
  nginx:
    container_name: nginx
    image: nginx:latest
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ../nginx/nginxTEST.conf:/etc/nginx/nginx.conf
    depends_on:
      - client
      - server
    networks:
      - app-network
  pg_backup:
    container_name: pg_backup
    image: alpine:latest
    command: sh -c " apk update && apk add --no-cache postgresql-client && \ echo '*/5 * * * * PGPASSWORD=$DB_PASSWORD pg_dump -h $DB_HOST -p $DB_PORT -U $DB_USER $DB_NAME > /backup/${DB_NAME}_backup_$(date +\%F_\%H-\%M).sql' > /etc/crontabs/root && \ crond -f -l 2 "
    volumes:
      - volume-sql-backup:/backup
    networks:
      - app-network
volumes:
  volume-media:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ../test_instance/media
  volume-sql:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ../test_instance/sql
  volume-sql-backup:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ../test_instance/sql_backup
networks:
  app-network:
    driver: bridge
